{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","head","value","onChange","event","target","rows","style","backgroundColor","color","disabled","length","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","element","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalise","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b472adda.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n    <div className=\"container-fluid\">\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"/about\">About</a>\n          </li>\n          {/* <li className=\"nav-item dropdown\">\n            <Link className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n              Dropdown\n            </Link>\n            <ul className=\"dropdown-menu\">\n              <li><Link className=\"dropdown-item\" href=\"/\">Action</Link></li>\n              <li><Link className=\"dropdown-item\" href=\"/\">Another action</Link></li>\n              <li><hr className=\"dropdown-divider\"/></li>\n              <li><Link className=\"dropdown-item\" href=\"/\">Something else here</Link></li>\n            </ul>\n          </li> */}\n          {/* <li className=\"nav-item\">\n            <Link className=\"nav-link disabled\">Disabled</Link>\n          </li> */}\n\n        </ul>\n        {/* <form className=\"d-flex\" role=\"search\">\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\n        </form> */}\n\n<div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n</div>\n\n      </div>\n    </div>\n  </nav>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string //passed as an object\n}\n\nNavbar.defaultProps = {\n    title: 'Mary'\n  };","import React, {useState} from 'react'  //use of hook\n\nexport default function Textform(props) {\n    const handleUpClick=() =>{\n        // console.log(\"Uppercase was clicked\" + text)\n        let newText=text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to UpperCase\",\"Success\")\n    }\n    const handleLowClick=() =>{\n      // console.log(\"Uppercase was clicked\" + text)\n      let newText=text.toLowerCase();\n      setText(newText)\n      props.showAlert(\"Converted to LowerCase\",\"Success\")\n  }\n  const handleCopy=()=>{\n    console.log(\"I am copy\")\n    var text= document.getElementById(\"mybox\")\n    text.select();\n    // text.setSelectionRange(0,9999);\n    navigator.clipboard.writeText(text.value);\n    document.getSelection().removeAllRanges();\n    props.showAlert(\"Copied to clipboard\", \"Success\")\n  }\n  const handleClear=()=>{\n    let newText='';\n    setText(newText);\n    props.showAlert(\"Cleared text\",\"Success\")\n  }\n    const handleUpChange=(event) =>{\n        // console.log(\"on change\")\n        setText(event.target.value);\n    }\n    const [text, setText] = useState(''); //*** \n  return (\n  <>\n                  <div className={`container text text-${props.mode === 'light'?'dark':'light'}`}>            \n                      <h1>{props.head}</h1>\n                      <div className=\"mb-3\">\n                      {/* <label htmlFor=\"mybox\" className=\"form-label\">{props.head}-{text}</label> */}\n                      <textarea className=\"form-control\" value={text} onChange={handleUpChange} id=\"mybox\" rows=\"8\" style= {{backgroundColor:props.mode === 'light'?'white':'rgba(var(--bs-dark-rgb)', color: props.mode === 'light'?'black':'white'}}></textarea> \n                </div> \n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to upper case</button>\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to lower case</button>\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClear}>Clear Text</button>\n    </div>\n<div className={`container my-4 text-${props.mode === 'light'?'dark':'light'}`}>\n  <h2>Text Summary</h2>\n  <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words {text.length} characters</p>\n  <p>Read in {0.008*(text.split(\" \").filter((element)=>{return element.length!==0}).length)} minutes</p>\n  <h2>Preview</h2>\n  <p>{text.length>0?text:\"Nothing to preview\"}</p>\n</div>\n    </>    \n  )\n}// on change was use to allow us to type and make the changes in already mentioned text\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalise=(word)=>{\n        const lower=word.toLowerCase();\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\n    }\n  return (\n    <div style={{height:`60px`}}>\n       { props.alert && <div className= {`alert alert-success alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg}\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\n        </div>}\n    </div>\n  )\n}\n\nexport default Alert","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport React, {useState} from 'react';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const[mode,setMode]= useState('light'); // whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert =(message, type)=>{\n    setAlert({\n      msg:message,\n      type: type            //Alert is an object\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode=() =>{\nif(mode=== 'light'){\n  setMode('dark');\n  document.body.style.backgroundColor='#151414';\n  showAlert(\"Dark mode has been enabled\",`success`)\n  document.title='Text-Utils-- Dark Mode'\n\n  // setInterval(() => {\n  //   document.title='Text-Utils is amazing'\n  // }, 2000);\n  // setInterval(() => {\n  //   document.title='Text-Utils is installing...'\n  // }, 1300);\n\n// above mentioned for scam-y websites, gives prompts at regular intervals\n\n}\nelse{\n  setMode('light');\n  document.body.style.backgroundColor='white';\n  showAlert(\"Light mode has been enabled\",`success`)\n  document.title='Text-Utils-- Light Mode'\n}\n  }\n  return (\n    <>\n{/* <Router> */}\n    <Navbar title=\"Text-Utils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container\">\n      {/* <Routes>\n          <Route exact path=\"/about\"\n           element={ <About mode={mode}/>}/>\n          <Route exact path=\"/\"\n          element= {<Textform showAlert={showAlert} head=\"Enter your text\" mode={mode} toggleMode={toggleMode}/>}/>\n      </Routes>\n      </div>  \n</Router> */}\n<Textform showAlert={showAlert} head=\"Enter your text\" mode={mode} toggleMode={toggleMode}/>\n{/* <About mode={mode}/> */}\n</div> \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}